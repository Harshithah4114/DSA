class Solution {
    public ArrayList<ArrayList<Integer>> connectedcomponents(int v, int[][] edges) {
        ArrayList<Integer>[]graph = new ArrayList[v];
        for(int i = 0; i<v; i++){
            graph[i] = new ArrayList<>();
        }
        
        for(int i = 0; i<edges.length; i++){
            int u = edges[i][0];
            int y = edges[i][1];
            graph[u].add(y);
            graph[y].add(u);
        }

        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        int []visited = new int[v];
        
        for(int i = 0; i<v; i++){
            if(visited[i] == 0){
                ArrayList<Integer> temp = new ArrayList<>();
                dfs(graph, i, temp, visited);
                Collections.sort(temp);
                ans.add(temp);
            }
            
        }
        return ans;
    }
    
    void dfs(ArrayList<Integer>[]graph, int src, ArrayList<Integer> temp, int []visited){
        temp.add(src);
        visited[src] = 1;
        //ArrayList<Integer> al = graph[src];
        for(int neighbour : graph[src] ){
            if(visited[neighbour] == 0){
                dfs(graph,neighbour, temp, visited);
            }
        }
    }
}
